buildscript {
    dependencies {
        classpath gradlePlugins.buildProperties
        classpath gradlePlugins.fabric
        classpath gradlePlugins.kotlin
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.M13"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.github.triplet.play'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

buildProperties {
    application {
        file project.file("$rootDir/team-props/application.properties")
    }
    secrets {
        file project.file("$rootDir/team-props/secrets.properties")
    }
    releaseSigningConfig {
        file project.file("$rootDir/team-props/releaseSigningConfig.properties")
    }
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId((buildProperties.application['applicationId'] | buildProperties.env['APPLICATION_ID']).string)

        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)

        multiDexEnabled true

        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        manifestPlaceholders += [
                fabricApiKey: (buildProperties.secrets['fabricApiKey'] | buildProperties.env['FABRIC_API_KEY']).string
        ]

        resValueProperty 'app_name', (buildProperties.application['applicationName'] | "Squanchy")

        resValueProperty 'api_value_twitter_api_key', (buildProperties.secrets['twitterApiKey'] | buildProperties.env['TWITTER_API_KEY'])
        resValueProperty 'api_value_twitter_secret', (buildProperties.secrets['twitterSecret'] | buildProperties.env['TWITTER_SECRET'])
        resValueProperty 'nearit_api_key', (buildProperties.secrets['nearITApiKey'] | buildProperties.env['NEARIT_API_KEY'])

        resValueProperty 'social_query', (buildProperties.application['socialQuery'] | "#AndroidDev")
        resValueProperty 'deeplink_scheme', (buildProperties.application['deeplinkScheme'] | "squanchy")
    }

    if (System.getenv('CI') == null) {
        signingConfigs {
            config {
                signingConfigProperties buildProperties.releaseSigningConfig
            }
        }

        buildTypes {
            debug {
                minifyEnabled false
            }
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.config
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }
    }

    lintOptions {
        lintConfig file("$rootDir/team-props/static-analysis/lint-config.xml")
        abortOnError false
    }
}

play {
    jsonFile = file("$rootDir/team-props/play-store-keys.json")
}

detekt {
    version = "1.0.0.M13"

    profile("main") {
        input = "$projectDir/src/main/java"
        config = "$rootDir/team-props/static-analysis/detekt-config.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt.xml"
    }
}

project.afterEvaluate {
    check.dependsOn tasks['detektCheck']
}

dependencies {
    implementation libraries.app.calligraphy
    implementation libraries.app.crashlytics
    implementation(libraries.app.findbugsAnnotations) {
        exclude group: 'net.jcip'
        exclude group: 'com.google.code.findbugs'
    }
    implementation libraries.app.firebase
    implementation libraries.app.firebaseAuth
    implementation libraries.app.firebaseConfig
    implementation libraries.app.firebaseDb
    implementation libraries.app.firebaseMessaging
    implementation libraries.app.firebaseStorage
    implementation(libraries.app.firebaseUiStorage) {
        exclude group: 'com.android.support'
        exclude group: 'com.google.firebase'
    }
    implementation libraries.app.glide
    implementation libraries.app.glideOkHttp3
    implementation libraries.app.jodaTimeAndroid
    implementation libraries.app.kotlin
    implementation(libraries.app.nearit) {
        exclude group: 'com.google.android.gms'
    }
    implementation libraries.app.playServicesAuth
    implementation libraries.app.playServicesLocation
    implementation libraries.app.rx
    implementation libraries.app.rxAndroid
    implementation libraries.app.supportAppCompat
    implementation libraries.app.supportDesign
    implementation libraries.app.timber
    implementation libraries.app.twitterCore
    implementation libraries.app.viewPagerAdapter

    annotationProcessor libraries.app.autoValue
    kapt libraries.app.autoValue
    compileOnly libraries.app.autoValue

    annotationProcessor libraries.app.daggerCompiler
    kapt libraries.app.daggerCompiler
    implementation libraries.app.dagger

    testImplementation libraries.test.fest
    testImplementation libraries.test.jodaTime
    testImplementation libraries.test.jUnit4
    testImplementation libraries.test.mockito
}

apply plugin: 'com.google.gms.google-services'
